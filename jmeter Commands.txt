https://www.perfmatrix.com/apache-jmeter-tips-and-tricks/

01 - Jmeter Installation
--------------------------

1. How to install JMeter Plugin Manager?
   >Download the ‘plugins-manager.jar’ file from this link.
   >Place the jar file in /lib/ext folder of Apache JMeter.
   >Example: C:\apache-jmeter-5.4\lib\ext
   >Open JMeter in GUI mode by clicking /bin/jmeter.bat
   >Go to Options -> Plugins Manager
   >You can see three tabs
	a. Installed Plugins: The list of plugins which are installed in JMeter
	b. Available Plugins: The list of plugins which are available, but not installed yet in JMeter
	c. Upgrades: For update notification

Install plugin manager first and install the plugins

1. 3 basic Graph
2. 5 Additional Graph
3. AutoStop Listener
4. Console Status Logger
5. Custom Thread Group
6. Dummy Sampler
7. Perfmon
8. Weighted Swith Controller
9. JPGC standard set
10. HTTP Simple Table server

02- Jmeter Configuration
-----------------------------

jmeter.property file
Reference Link(Your Udmey Course)
1.If you want to change anything on jmeter.property file don't chage it directly.
  Just copy the parameter and past it on user.propery file (past is on last line) 
  and change the parameter. 
  This will help us to migrate jmeter scripts from one version to another easily

 user.property
 Reference Link (http://samranga.blogspot.com/2017/05/apache-jmeter-provides-2-modes-of.html)
 1. summariser.name=summary
    summariser.interval=30
    summariser.out=true
    summariser.log=true
    
  jmeter.properties
-------------------------

Follow the below steps to enable undo and redo options:

Navigate to “bin” folder of JMeter directory
Open “jmeter.properties” file using Notepad or Notepad++
Search for “undo.history.size”
Uncomment the line “undo.history.size=0” by removing # (sharp sign)
Set a natural number as a value of “undo.history.size” attribute e.g. 1, 5, 10, 50 etc. (This number represents the maximum number of steps that you can undo or redo.)
Save the file “jmeter.properties” and relaunch JMeter to reflect the changes.


Goto to “bin” folder of JMeter and open “user.properties” file using Notepad or Notepad++. Then go to the section “Reporting configuration” in the file. Make the changes as mentioned below:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Modified values are:
jmeter.reportgenerator.overall_granularity=1000 (Refer reportgenerator.property file if jmeter 5.4 and above)
jmeter.reportgenerator.apdex_satisfied_threshold=500
jmeter.reportgenerator.apdex_tolerated_threshold=1500
jmeter.reportgenerator.exporter.html.series_filter=^(01_Launch_HomePage|02_Select_Any_Animal|03_Select_A_Type|04_Select_A_Sub_Type|05_Clicking_AddToCart|Dashboard_Report_Generation)(-success|-failure)?$     (Refer reportgenerator.property file if jmeter 5.4 and above)

Note:
  The easiest way to get the Transaction Controller names from Test Plan is JMeter Menu -> Tools -> Export transactions for report.
  
Optional changes:
----------------------
In addition, you can modify a few more properties of “user.properties” file under “Reporting configuration” as per your requirement but they are optional:

To show an appropriate name of JMeter HTML Dashboard Report, update the value of below property:

jmeter.reportgenerator.report_title=JPetStore JMeter Dashboard Report

To change the time format of “Start Time” and “End Time” in Report update the value of below property:

jmeter.save.saveservice.timestamp_format= dd-MM-yyyy HH:mm:ss



reportgenerator.property file (or ) copy and past it on user.property it works
-------------------------------------------------------------------------------

1. To generate only transaction controller output in HTML report
# Indicates whether only controller samples are displayed on graphs that support it.
jmeter.reportgenerator.exporter.html.show_controllers_only=true

generate HTML report with seconds instead of millsecond
--------------------------------------------------------
https://www.perfmatrix.com/how-to-change-jmeter-html-reports-response-time-values-in-second/

Jmeter Tuning (Source from udmey course video:Jmeter Tuning also refer https://jmeter.apache.org/usermanual/get-started.html )
----------------------------------------------------------
There are a few environment variables, that can be used to customize the JVM settings for JMeter. An easy way to set those is by creating a file named setenv.bat in the bin directory. Such a file could look like:

rem This is the content of bin\setenv.bat,
rem it will be called by bin\jmeter.bat

set JVM_ARGS=-Xms1G -Xmx1G -Dpropname=value

Jmeter Influxdb and Grafana integration
-------------------------------------------
Step 1:
> docker run -d --name=influxdb -p 9002:8086 quay.io/influxdb/influxdb:v2.0.3
Step 2:
> open browser and type url http://localhost:9002/
Step 3:
Fill the form
User Name:xxxxx
Password:xxxx
Organisaction Name:xxxx
Bucket Name:jmeter
>Step 4:
Click on quick start
> Step 5:
Click on Data and clicl on "Generate"-->Read/Write Token
>Step 6:
select jmeter from both read and write section, give the token name and click on save
>Step 7:
Add Backend Listener and enter the below details
1. Backend Listener implementation: influcdbBackendListenerClient
2. InfluxURL:http://localhost:9002/api/v2/write?org=karthik&bucket=jmeter
   Note: If you used latest jmeter 5.4 you need to include the organisation name(org)
3. application:demo
4. Test Title:Demo
5. click on Add button at the bottom of the backend listener element and add the influx token. It is necessary to read/write data on influxdb
   
   influxdbToken:_KWcFnjs0_ZqzjKq2J0vpsh0i7biSactj09fmbVbPmYFiRY6zABET-ZyLfDm1gjHLrhKT4iwcF93BvbOtFbIug==
   Note: 
     1. Copy the token from influxdb. 
     2. The name "influxdbToken" is case sensetive pls give the name as it is
     
 Setup Grafana
 ---------------------

docker run -d --name=grafana -p 5000:3000 grafana/grafana

http://localhost:5000/login
Enter defail userid/password
admin
admin

After you enter default userid/password it will ask you to change the password

Integrate Grafana with Influx database

Go to settings -> datasources  -->Add data source --->select influxdb--->
Name:influxdb
Query Language:Flux (If the version is 2 and above)

Enter Connectio Details:
URL:http://172.17.0.2:8086 (This ip is influx contailer)
Organization:karthik
Token:
Default Bucket: jmeter

Note: docker command to get container ip
> docker ps
> docker container inspect b154
 



jmeterRecording
-----------------

To filrer unwanted request :

.*(activity.windows.com|content-autofill.googleapis.com|beacons.gcp.gvt2.com|www.google.com|accounts.google.com|safebrowsing.googleapis.com|icon.internal.local/es/heatmap/_search?size=0).*

File Upload :

if it is file upload script make sure the file needs to be placed in bin directory before recording

Custome code
---------------
1. Note if you write custome code on JSR223 Assersion user vars.get and vars.put function to store values to access on jmeter elements 
(example :Flow Action contron, HTTP Request)
2. Normal groovy variables are stote as it is "def"
3. log the output message
      log.info("Response Time is:"+time.toString())  //To print def variables
      log.info("temp_pacing is:"+vars.get("temp_pacing")) //To print vars.put variables

4. https://jmeter-plugins.org/wiki/Functions/
   Note: 
   chooseRandom
   ${__chooseRandom(red,green,blue,orange,violet,magenta,randomColor)}
   doubleSum
   ${__doubleSum(3.5, 4.7, sumVariable)}
   env
   ${__env(ENV_VAR, someVariable, defaultValue)}
   isDefined
   ${__isDefined(testVar)}
   MD5
   ${__MD5(test)}
   base64Encode
   ${__base64Encode(test string)}
   base64Decode
   ${__base64Decode(dGVzdCBzdHJpbmc=)}
   strLen
   ${__strLen(test string, lenVariable)}
   substring
   ${__substring(test string, 5, 8)}
   strReplace
   ${__strReplace(banana apple orange,apple,dog)}
   if
   ${__if(${size}, 5, ok, invalid)}



Jmeter Scripting Standard settings
----------------------------------
1. Select "Continue" option at thread group

2. Implement Text Check usinh JSR223 Assertion
   
   Method 1: without TPS logic
   ------------------------------

   String textCheck=vars.get("var_message");

	if (textCheck=="Message sent successfully")
	{
		AssertionResult.setFailure(false);  
		log.info("TextCheck:Pass,ThreadGroup:"+
		ctx.getThreadGroup().getName()+
		",UserName:"+vars.get("UserName")+
		",IterationNum:"+vars.getIteration()+
		",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
		",ThreadNum:"+${__threadNum})
	}
	else{
		AssertionResult.setFailure(true);  
		log.info("TextCheck:Fail,ThreadGroup:"+
		ctx.getThreadGroup().getName()+
		",UserName:"+vars.get("UserName")+
		",IterationNum:"+vars.getIteration()+
		",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
		",ThreadNum:"+${__threadNum})
		ctx.setRestartNextLoop(true);
	}
	
	Method 2: With TPS logic
	---------------------------------
	
	String textCheck=vars.get("var_message")

	def time=0
	time=prev.getTime()
	pacing=1000
	d_pacing=pacing-time

	log.info("Response Time is:"+time.toString())
	log.info("d_pacing Time is:"+d_pacing.toString())

	if (d_pacing>0)
	{
		log.info("Fiest if")
		vars.put("temp_pacing",d_pacing.toString())
	}

	if (d_pacing<0)
	{    log.info("2nd if")
		vars.put("temp_pacing","0")
		log.info("temp_pacing is:"+vars.get("temp_pacing"))
	}


	if (textCheck=="Message sent successfully")
	{
		AssertionResult.setFailure(false);  
		log.info("TextCheck:Pass,ThreadGroup:"+
		ctx.getThreadGroup().getName()+
		",UserName:"+vars.get("UserName")+
		",IterationNum:"+vars.getIteration()+
		",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
		",ThreadNum:"+${__threadNum})
	}
	else{
		AssertionResult.setFailure(true);  
		log.info("TextCheck:Fail,ThreadGroup:"+
		ctx.getThreadGroup().getName()+
		",UserName:"+vars.get("UserName")+
		",IterationNum:"+vars.getIteration()+
		",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
		",ThreadNum:"+${__threadNum})


	}
	
   3. Add "Result Status Action Handler" and select "Start Next Thread Loop" after the JSR223 Assertion
                                   (OR)
      Add "Flow Controll Action"  and select "Start Next Thread Loop" after the JSR223 Assertion
      
   4. Once the recording is completed then perform “Apply Naming Policy” action to all the samplers inside each Transaction Controllers
   
   5. Remember:
      --------------
      1.If you select the option “Generate parent sample” in Transaction Controller and run the test in Non-GUI mode then you will not see the Test Summary. Test will execute,          but Test Summary will not generate.
      2. Furthermore, the CSV (or JTL) file will be having some missing information on some samplers and some Graphs/Tables will be empty or will not have enough details in the          HTML Report, examples:
      a. Top Errors
      b. Top Errors by Samplers
      c. Response code over time
      
      
VTS Integration
---------------------
To Get Value:

GET:http://${Var_VTS_ServerIP}:4000/data/get_page?rows=0&page=1&_=1519738913776
JSON Extractor:
  Name of created variable : VTS_batchID
  JSON Path Expression: $.rows[0].BIKE_TT_batchID 
  Match No: 0
  
 To Delete Value:
 GET : http://${Var_VTS_ServerIP}:4000/data/delete_data?colname=BIKE_TT_batchID&rowid=0&_=1519738913776


Jmeter Execution
---------------------
To start test
jmeter -n -t C:\Karthik\02_Scripts\Jmeter_HTTPSERVER_POC.jmx -l C:\Karthik\03_Results\03_Nov_2020_SmokeTest\RunID01_23_Dec_Load_25Users.jtl 
To generate html report
jmeter -g C:\Karthik\03_Results\03_Nov_2020_SmokeTest\RunID01_23_Dec_Load_25Users.jtl -o C:\Karthik\03_Results\03_Nov_2020_SmokeTest\RunID01_23_Dec_Load_25Users


Note: The below approach is bit confusing. Need to do some R&D Make sure there should not be any space after the ^ symble. Property Syntax ${__P(USER,1)}  ${__P(RAMPUP,1)}  ${__P(ITERATION,1)}

jmeter -n ^
-t C:\Karthik\02_Scripts\Jmeter_HTTPSERVER_POC.jmx ^
-l C:\Karthik\03_Results\03_Nov_2020_SmokeTest\TransactionTime.jtl ^
-JUSER=10 ^
-JRAMPUP=10 ^
-JITERATION=10

JTLFile settings
-------------------

JTL Time Stamp Conversion
https://stackoverflow.com/questions/15164237/how-do-i-convert-a-unix-epoch-timestamp-into-a-human-readable-date-time-in-excel

Note you can drop the /1000 if your epoch time was in seconds rather than milliseconds. To convert to local time, where 't' is your local UTC offset (remember to use a negative value if you have a negative UTC offset), you can add/subtract the UTC offset:

=A2/86400/1000+DATEVALUE("1-1-1970")+t/24
=A2/86400/1000+DATEVALUE("1-1-1970")+8/24




Why to execute non-gui mode ?
********************************************************************************************************
-gui  - consumes more resources / memory
-gui - not recommended for heavy load testing
-command line - can be integrated with other systems  -Jenkins/CI …

Step 1 : Goto command line - goto jmeter - bin

Step 2 : Command : 

jmeter -n -t (location of your jmeter test script) -l (location of the result file)
   
            -n - non gui mode
            -t  - location of jmeter script
            -l  - location of result file

jmeter -h  - to get help on jmeter commands 

jmeter -?  - to get information on jmeter command options

create a bat file and past the below cmd
**********************************************************************************************************
C:
Cd Karthik\apache-jmeter-5.3\apache-jmeter-5.3\bin
jmeter -n -t C:\Karthik\02_Scripts\IMS_BP01.jmx -l C:\Karthik\03_Results\IMS_BP01.jtl

To Generate HTML report
***********************************************************************************************************
jmeter -g <log file> -o <path to output folder>
D:\apache-jmeter-5.2.1\bin>jmeter -g D:\Scripts\Result.jtl -o D:\Scripts\HtmlResult

Jmeter Distributed Load Test Checklist
************************************************************************************************************
LG's

1. Copy and Past the same jmeter version on all the LG's
2. Set the JAVA_HOME C:\Program Files\Java\jdk1.8.0_241
3. Set the JMETER_HOME C:\Karthik\apache-jmeter-5.2.1\apache-jmeter-5.2.1
4. Go to user.property file and check the below settings
   server.rmi.ssl.disable=true
   sample_variables=UNIQUE_NUMBER_0,POIUNIQUE_NUMBER_1,ReqID,var_IMS_sensorid_3
5. Run the jmeter-server.bat services on all the jmeter machine and ensure the connection object is created

Controller

1. Go to jmeter.property file and include all the LG IP's
remote_hosts=127.0.0.1,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx

2. Go to jemeter.property and set the below changes to see the LG name or IP in you jtl(Note: No need to enable this setting on LG)
jmeter.save.saveservice.hostname=true

To run distribution test
*******************************************************************************************************************************
jmeter -n -t C:\Karthik\02_Scripts\IMS_BP01.jmx -l C:\Karthik\03_Results\IMS_BP01.jtl -r


Important Settings for JTL Analyser
-------------------------------------

I already found the solution. In the jmeter.properties file I had to set

jmeter.save.saveservice.subresults=true

And unselect the Generate parant option in transaction controller

JTL Analyser pyinstaller command
----------------------------------
pipenv run pyinstaller --onefile -w  --paths C:/Users/Ibrahim/.virtualenvs/Tkinter-8T4K30-g app.py

Request Filter
---------------
.*(activity.windows.com|content-autofill.googleapis.com|beacons.gcp.gvt2.com|www.google.com|accounts.google.com|safebrowsing.googleapis.com|icon.internal.local/es/heatmap/_search?size=0).*

JSR233 Assertion
--------------------


Bheanshell Assertion
------------------------

String textCheck=vars.get("var_message");

if(textCheck.contains("Message sent successfully"))
{
	Failure=false;
	log.info("TextCheck:Pass,ThreadGroup:"+
	ctx.getThreadGroup().getName()+
	",UserName:"+vars.get("UserName")+
	",IterationNum:"+vars.getIteration()+
	",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
	",ThreadNum:"+${__threadNum}
	);
	
}
else{
	Failure=true;
	FailureMessage="TextCheck:Fail,ThreadGroup:"+
	ctx.getThreadGroup().getName()+
	",UserName:"+vars.get("UserName")+
	",IterationNum:"+vars.getIteration()+
	",DateTime:${__time(${__time(dd-MM-YYYY:HH:mm:ss,)},)}"+
	",ThreadNum:"+${__threadNum};
}


 
 Unique Number Generation
 ----------------------------
 String uniquenumber ="POI${__time(hhmmss)}${__threadNum}";
vars.put("ReqID",uniquenumber);

User.Property
----------------
server.rmi.ssl.disable=true
sample_variables=IncidentType,IncidentID,ReqID





 
